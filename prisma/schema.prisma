generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  logoUrl String?
  users   User[]
  invites Invite[]
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  balance      Decimal   @default(0) @db.Decimal(10, 2)
  markup       Decimal   @default(5) @db.Decimal(10, 2)
  telegram     String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cardsIds     String[]
  transactions Transaction[]
  status       String    @default("buyer")
  teamId       Int?
  team         Team?     @relation(fields: [teamId], references: [id])
}

model Request {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  telegram       String   @unique
  password       String
  submissionTime DateTime @default(now())
  status         String   @default("buyer")
  team           String   @default("")
}

model SingleValue {
  id    Int    @id @default(autoincrement())
  value Float
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  type        String   
  description String   
  amount      Float    
  timestamp   DateTime @default(now())
  isHold      Boolean  @default(false)
}

model CardTransaction {
  id          Int      @id @default(autoincrement())
  cardId      String
  type        String   
  description String   
  amount      Float    
  timestamp   DateTime @default(now())
}

model CardBalance {
  id      Int      @id @default(autoincrement())
  cardId  String   @unique
  balance Decimal  @default(0) @db.Decimal(10, 2)
}

model Hold {
  id            Int      @id @default(autoincrement())
  transactionId Int      @unique
  userId        Int
  reverseTime   DateTime
  amount        Float
  isTransferred Boolean  @default(false)
}

model CardLock {
  id        Int      @id @default(autoincrement())
  cardUuid  String   @unique
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MaintenanceMode {
  id      Int     @id @default(autoincrement())
  enabled Boolean @default(false)
}

model RateLimit {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  nextBuyRequest    DateTime
  nextDeleteRequest DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId], name: "userId")
}

model Invite {
  id        String   @id @default(uuid())
  status    String
  teamId    Int
  inviteUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team     @relation(fields: [teamId], references: [id])
}
